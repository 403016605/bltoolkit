<?xml version="1.0" encoding="utf-8" ?>
<examples>

<mapsettable name="SetField(string,object)">
<example>
The following example demonstrates how to use the <b>IMapSettable</b> interface.
<code>
using System;
using System.Collections;

using NUnit.Framework;

using Rsdn.Framework.Data;
using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_IMapSettable
{
	[TestFixture]
	public class SetField_string_object
	{
		// Base business entity class.
		//
		public abstract class BizEntityBase : IMapSettable
		{
			private Guid _id;
			public  Guid  ID
			{
				get { return _id; }
			}

			#region IMapSettable Members

			bool IMapSettable.SetField(string fieldName, object value)
			{
				if (string.Compare(fieldName, GetType().Name + "ID") == 0)
				{
					_id = (Guid)value;

					return true;
				}

				return false;
			}

			#endregion
		}

		// Business entity.
		//
		public class Customer : BizEntityBase
		{
			public string Name;
			public string Description;
		}

		[Test]
		public void Test()
		{
			Customer customer;

			using (DbManager db = new DbManager())
			{
				customer = (Customer)db
					.SetCommand(@"
						SELECT
							NewID() as CustomerID,
							'RSDN'  as Name,
							'Number one Russian resource for software developers!' as Description")
					.ExecuteBizEntity(typeof(Customer));
			}

			Console.WriteLine("ID:          {0}", customer.ID);
			Console.WriteLine("Name:        {0}", customer.Name);
			Console.WriteLine("Description: {0}", customer.Description);

			Assert.IsFalse(customer.ID == Guid.Empty);
		}
	}
}
</code>
</example>
</mapsettable>

<map name="FromValue(object)">
<example>
The following example demonstrates how to use the <b>FromValue</b> method.
<code>
using System;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_Map
{
	[TestFixture]
	public class FromValue_object
	{
		[MapValue(Status.Active,   "A")]
		[MapValue(Status.Inactive, "I")]
		[MapValue(Status.Pending,  "P")]
		[MapNullValue(Status.Null)]
		public enum Status
		{
			Active,
			Inactive,
			Pending,
			Null
		}

		[Test]
		public void Test()
		{
			Assert.AreEqual("A",  Map.FromValue(Status.Active));
			Assert.AreEqual("I",  Map.FromValue(Status.Inactive));
			Assert.AreEqual("P",  Map.FromValue(Status.Pending));
			Assert.AreEqual(null, Map.FromValue(Status.Null));
		}
	}
}
</code>
</example>
</map>

<map name="ISupportInitialize">
<example>
The following example demonstrates how to use the <see cref="ISupportInitialize"/> interface 
which is supported by the mapper.
<code>
using System;
using System.ComponentModel;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_Map
{
	[TestFixture]
	public class ISupportInitialize_Support
	{
		public class SourceEntity
		{
		}

		public class InitializedEntity : ISupportInitialize
		{
			[MapIgnore] public string BeginString;
			[MapIgnore] public string EndString;

			void ISupportInitialize.BeginInit()
			{
				BeginString = "begin";
			}

			void ISupportInitialize.EndInit()
			{
				EndString = "end";
			}
		}

		[Test]
		public void Test()
		{
			InitializedEntity ie = 
				(InitializedEntity)Map.ToObject(new SourceEntity(), typeof(InitializedEntity));

			Assert.AreEqual("begin", ie.BeginString);
			Assert.AreEqual("end",   ie.EndString);
		}
	}
}
</code>
</example>
</map>

<map name="ToObject(object,object)">
<example>
The following example demonstrates how to use the method.
<code>
using System;
using System.Data;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_Map
{
	[TestFixture]
	public class ToObject_object_object
	{
		public class BizEntity
		{
			public int    ID;
			public string Name;
		}

		[Test]
		public void Test()
		{
			BizEntity entity = new BizEntity();

			entity.ID   = 1;
			entity.Name = "Example";

			DataTable table = new DataTable();

			table.Columns.Add("ID",   typeof(int));
			table.Columns.Add("Name", typeof(string));

			Map.ToObject(entity, table);

			Assert.AreEqual(entity.ID,   table.Rows[0]["ID"]);
			Assert.AreEqual(entity.Name, table.Rows[0]["Name"]);
		}
	}
}
</code>
</example>
</map>

<map name="ToObject(object,Type)">
<example>
The following example demonstrates how to use the method.
<code>
using System;
using System.Data;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_Map
{
	[TestFixture]
	public class ToObject_object_Type
	{
		public class BizEntity
		{
			public int    ID;
			public string Name;
		}

		[Test]
		public void Test()
		{
			DataTable table = new DataTable();

			table.Columns.Add("ID",   typeof(int));
			table.Columns.Add("Name", typeof(string));

			table.Rows.Add(new object[] { 1, "Example" });

			BizEntity entity = 
				(BizEntity)Map.ToObject(table, typeof(BizEntity));

			Assert.AreEqual(table.Rows[0]["ID"],   entity.ID);
			Assert.AreEqual(table.Rows[0]["Name"], entity.Name);
		}
	}
}
</code>
</example>
</map>

<map name="ToValue(object,Type)">
<example>
The following example demonstrates how to use the <b>ToValue</b> method.
<code>
using System;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_Map
{
	[TestFixture]
	public class ToValue_object_Type
	{
		[MapValue       (Status.Active,   "A")]
		[MapValue       (Status.Inactive, "I")]
		[MapValue       (Status.Pending,  "P")]
		[MapNullValue   (Status.Null)]
		[MapDefaultValue(Status.Unknown)]
		public enum Status
		{
			Active,
			Inactive,
			Pending,
			Unknown,
			Null
		}

		[Test]
		public void Test()
		{
			Assert.AreEqual(Status.Active,   Map.ToValue("A",  typeof(Status)));
			Assert.AreEqual(Status.Inactive, Map.ToValue("I",  typeof(Status)));
			Assert.AreEqual(Status.Pending,  Map.ToValue("P",  typeof(Status)));
			Assert.AreEqual(Status.Null,     Map.ToValue(null, typeof(Status)));
			Assert.AreEqual(Status.Unknown,  Map.ToValue(123,  typeof(Status)));
		}
	}
}
</code>
</example>
</map>

<desc name="SetMappingSchema(string)">
<example>
The following example demonstrates how to use the <b>MapFieldAttribute.IsTrimmable</b> property.
<code>
using System;
using System.IO;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_MapDescriptor
{
	[TestFixture]
	public class SetMappingSchema_string
	{
		[SetUp]
		public void SetUp()
		{
			using (StreamWriter sw = File.CreateText("Mapping.xml"))
			{
				sw.WriteLine(@"&lt;?xml version='1.0' encoding='utf-8' ?&gt;
&lt;mapping xmlns='http://www.rsdn.ru/mapping.xsd'&gt;
	&lt;type name='Dest'&gt;
	&lt;/type&gt;
    &lt;value_type name='TriState'&gt;
        &lt;value target='Yes'           source='yes'   source_type='System.String' /&gt;
        &lt;value target='No'            source='no'    source_type='System.String' /&gt;
        &lt;value target='NotApplicable' source='(n/a)' source_type='System.String' /&gt;
        &lt;null_value    target='NotApplicable' /&gt;
        &lt;default_value target='NotApplicable' /&gt;
    &lt;/value_type&gt;
&lt;/mapping&gt;");
			}
		}

		[MapXml("TriState")]
		public enum TriState { Yes, No, NotApplicable };

		public class Source
		{
			public string Field1 = "no";
		}

		[MapXml("Dest")]
		public class Dest
		{
			private TriState _f1 = TriState.NotApplicable;

			public TriState Field1
			{
				get { return _f1;  }
				set { _f1 = value; }
			}
		}

		[Test]
		public void Test()
		{
			MapDescriptor.SetMappingSchema("Mapping.xml");

			Source  s = new Source();
			Dest    d = (Dest)Map.ToObject(s, typeof(Dest));
		}

		[TearDown]
		public void TearDown()
		{
			File.Delete("Mapping.xml");
		}
	}
}
</code>
</example>
</desc>

<emit name="Custom_ctor">
<example>
The following example demonstrates the ability to call custom constructor of the generated class.
<code>
using System;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_MapEmit
{
	[TestFixture]
	public class Custom_ctor
	{
		public abstract class BizEntity
		{
			public BizEntity()
			{
				Value = "1";
			}

			public BizEntity(string value)
			{
				Value = value;
			}

			/*
			public BizEntity()
			{
			}
			*/

			public abstract string Value { get; set; }
		}

		[Test]
		public void Test()
		{
			BizEntity entity = (BizEntity)Map.Descriptor(typeof(BizEntity)).CreateInstance();

			Assert.AreEqual("1", entity.Value);

			//entity = (BizEntity)Map.Descriptor(typeof(BizEntity)).CreateInstance("2");

			//Assert.AreEqual("2", entity.Value);
		}
	}
}
</code>
</example>
</emit>

<mapfield name="IsTrimmable">
<example>
The following example demonstrates how to use the <b>MapFieldAttribute.IsTrimmable</b> property.
<code>
using System;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_MapFieldAttribute
{
	[TestFixture]
	public class IsTrimmable
	{
		public class Source
		{
			public string String1 = "test1    ";
			public string String2 = "test2    ";
		}

		public class Target
		{
			public string String1;

			[MapField(IsTrimmable=false)]
			public string String2;
		}

		[Test]
		public void Test()
		{
			Target t = (Target)Map.ToObject(new Source(), typeof(Target));

			Assert.AreEqual("test1",     t.String1);
			Assert.AreEqual("test2    ", t.String2);
		}
	}
}
</code>
</example>
</mapfield>

<mapparam name="ctor(object)">
<example>
The following example demonstrates how to use the <b>MapParameterAttribute</b> attribute.
<code>
using System;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_MapParameterAttribute
{
	[TestFixture]
	public class ctor_object
	{
		public interface IValidatable
		{
			void Validate();
		}

		// This class can be used for internal implementation of string properties.
		//
		public class EditableString : IValidatable
		{
			public EditableString()
			{
			}

			public EditableString(string fieldName, int maxLength)
			{
				_fieldName = fieldName;
				_maxLength = maxLength;
			}

			public EditableString(object[] parameters)
			{
				foreach (object o in parameters)
				{
					if (o is string)
						_fieldName = (string)o;
					else if (o is int)
						_maxLength = (int)o;
				}
			}

			private string _fieldName;
			private int    _maxLength;

			private string _value;
			public  string  Value
			{
				get { return _value;  }
				set { _value = value; }
			}

			#region IValidatable Members

			void IValidatable.Validate()
			{
				if (_maxLength &gt; 0)
				{
					if (_value == null || _value.Length == 0)
						throw new ApplicationException(
							string.Format("Field '{0}' must not be empty.", _fieldName));

					if (_value.Length &gt; _maxLength)
						throw new ApplicationException(
							string.Format("Field '{0}' length must be less than {1}.",
							_fieldName, 
							_maxLength));
				}
			}

			#endregion
		}

		// Base entity class.
		// Implements the IValidatable interface and defines internal implementation types
		// of abstract properties.
		//
		[MapType(typeof(string), typeof(EditableString))]
		public abstract class BizEntityBase : IValidatable
		{
			#region IValidatable Members

			public void Validate()
			{
				// This call returns all internal objects created by the mapper
				// in order to implement concrete class.
				//
				object[] generatedMembers = ((IMapGenerated)this).GetCreatedMembers();

				foreach (object o in generatedMembers)
					if (o is IValidatable)
						((IValidatable)o).Validate();
			}

			#endregion
		}

		// Business entity.
		//
		public abstract class MyBizEntity : BizEntityBase
		{
			// This attribute enforces the mapper to call
			// the EditableString("Name", 20) constructor
			// during the concrete class generation.
			//
			[MapParameter("Name", 20)]
			public abstract string Name { get; set; }

			// This attribute enforces the mapper to call
			// the EditableString(object[] parameters) constructor.
			//
			[MapParameter("Description")]
			public abstract string Description { get; set; }

			// Creates a concrete class.
			//
			public static MyBizEntity CreateInstance()
			{
				return (MyBizEntity)Map.Descriptor(typeof(MyBizEntity)).CreateInstance();
			}
		}

		[Test]
		public void Test1()
		{
			MyBizEntity entity = MyBizEntity.CreateInstance();

			entity.Name        = "Test";
			entity.Description = "Test 6789 123456789 12345";

			entity.Validate();
		}

		[Test]
		[ExpectedException(
			 typeof(ApplicationException),
			 "Field 'Name' must not be empty.")]
		public void Test2()
		{
			MyBizEntity entity = MyBizEntity.CreateInstance();

			entity.Name = "";

			entity.Validate();
		}

		[Test]
		[ExpectedException(
			 typeof(ApplicationException),
			 "Field 'Name' length must be less than 20.")]
		public void Test3()
		{
			MyBizEntity entity = MyBizEntity.CreateInstance();

			entity.Name = "Test 6789 123456789 12345";

			entity.Validate();
		}
	}
}
</code>
</example>
</mapparam>

<maptype name="ctor(Type)">
<example>
The following example demonstrates how to use the <b>MapTypeAttribute</b> attribute.
<code>
using System;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_MapTypeAttribute
{
	[TestFixture]
	public class ctor_Type
	{
		public class MyInt1
		{
			public int Value { get { return 1; } }
		}

		public class MyInt2
		{
			public int Value { get { return 2; } }
		}

		public class MyInt3
		{
			public int Value { get { return 3; } }
		}

		[MapType(typeof(int), typeof(MyInt2))]
		public abstract class BaseEntity
		{
		}

		public interface IEntity
		{
			[MapType(typeof(MyInt3))]
			int Property3 { get; }
		}

		public abstract class TestEntity : BaseEntity, IEntity
		{
			// Implementation property type is set explicitly.
			//
			[MapType(typeof(MyInt1))]
			public abstract int Property1 { get; }

			// Implementation type is taken from BaseEntity.
			// MyInt2 is propagated to all current and child classes properties of int type.
			//
			public abstract int Property2 { get; }
		
			// Implementation type is taken from IEntity.
			// This way has higher priority than previous one.
			//
			public abstract int Property3 { get; }
		}

		[Test]
		public void Test()
		{
			TestEntity te = (TestEntity)Map.Descriptor(typeof(TestEntity)).CreateInstance();

			Assert.AreEqual(1, te.Property1);
			Assert.AreEqual(2, te.Property2);
			Assert.AreEqual(3, te.Property3);
		}
	}
}
</code>
</example>
</maptype>

<maptype name="ctor(Type,object,object)">
<example>
The following example demonstrates how to use the <b>MapTypeAttribute</b> attribute.
<code>
using System;

using NUnit.Framework;

using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_MapTypeAttribute
{
	[TestFixture]
	public class ctor_Type_object_object
	{
		public interface IValidatable
		{
			void Validate();
		}

		// This class can be used for internal implementation 
		// of string properties that need to be validated.
		//
		public class RequiredString : IValidatable
		{
			public RequiredString(string fieldName, int maxLength)
			{
				_fieldName = fieldName;
				_maxLength = maxLength;
			}

			private string _fieldName;
			private int    _maxLength;

			private string _value;
			public  string  Value
			{
				get { return _value;  }
				set { _value = value; }
			}

			#region IValidatable Members

			void IValidatable.Validate()
			{
				if (_value == null || _value.Length == 0)
					throw new ApplicationException(
						string.Format("Field '{0}' must not be empty.", _fieldName));

				if (_value.Length &gt; _maxLength)
					throw new ApplicationException(
						string.Format("Field '{0}' length must be less than {1}.",
						_fieldName, 
						_maxLength));
			}

			#endregion
		}

		// Base entity class.
		// Implements the IValidatable interface.
		//
		public abstract class BizEntityBase : IValidatable
		{
			#region IValidatable Members

			public void Validate()
			{
				// This call returns all internal objects created by the mapper
				// in order to implement concrete class.
				//
				object[] generatedMembers = ((IMapGenerated)this).GetCreatedMembers();

				foreach (object o in generatedMembers)
					if (o is IValidatable)
						((IValidatable)o).Validate();
			}

			#endregion
		}

		// Business entity.
		//
		public abstract class MyBizEntity : BizEntityBase
		{
			// This attribute enforces the mapper to call 
			// the RequiredString("Description", 20) constructor
			// during the concrete class generation.
			//
			[MapType(typeof(RequiredString), "Description", 20)]
			public abstract string Description { get; set; }

			// Creates a concrete class.
			//
			public static MyBizEntity CreateInstance()
			{
				return (MyBizEntity)Map.Descriptor(typeof(MyBizEntity)).CreateInstance();
			}
		}

		[Test]
		public void Test1()
		{
			MyBizEntity entity = MyBizEntity.CreateInstance();

			entity.Description = "Test";

			entity.Validate();
		}

		[Test]
		[ExpectedException(
			 typeof(ApplicationException),
			 "Field 'Description' must not be empty.")]
		public void Test2()
		{
			MyBizEntity entity = MyBizEntity.CreateInstance();

			entity.Description = "";

			entity.Validate();
		}

		[Test]
		[ExpectedException(
			 typeof(ApplicationException),
			 "Field 'Description' length must be less than 20.")]
		public void Test3()
		{
			MyBizEntity entity = MyBizEntity.CreateInstance();

			entity.Description = "Test 6789 123456789 12345";

			entity.Validate();
		}
	}
}
</code>
</example>
</maptype>

<maptype name="ctor(Type)">
<example>
The following example demonstrates how to use the <b>MapTypeAttribute</b> attribute.
<code>
using System;
using NUnit.Framework;
using Rsdn.Framework.Data.Mapping;

namespace Examples_Mapping_MapTypeAttribute
{
	public class MyInt1
	{
		public int Value { get { return 1; } }
	}

	public class MyInt2
	{
		public int Value { get { return 2; } }
	}

	public class MyInt3
	{
		public int Value { get { return 3; } }
	}

	[MapType(typeof(int), typeof(MyInt2))]
	public abstract class BaseEntity
	{
	}

	public interface IEntity
	{
		[MapType(typeof(MyInt3))]
		int Property3 { get; }
	}

	public abstract class TestEntity : BaseEntity, IEntity
	{
		// Implementation property type is set explicitly.
		//
		[MapType(typeof(MyInt1))]
		public abstract int Property1 { get; }

		// Implementation type is taken from BaseEntity.
		// MyInt2 is propagated to all current and child classes properties of int type.
		//
		public abstract int Property2 { get; }
	
		// Implementation type is taken from IEntity.
		// This way has higher priority than previous one.
		//
		public abstract int Property3 { get; }
	}

	[TestFixture]
	public class MapTypeAttribute_ctor_Type
	{
		[Test]
		public void Test()
		{
			TestEntity te = (TestEntity)Map.Descriptor(typeof(TestEntity)).CreateInstance();

			Assert.AreEqual(1, te.Property1);
			Assert.AreEqual(2, te.Property2);
			Assert.AreEqual(3, te.Property3);
		}
	}
}
</code>
</example>
</maptype>


</examples>
