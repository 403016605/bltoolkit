<p class="j">The following example demonstrates how to create and use an abstract data accessor class.
All abstract methods of the class are generated at run-time depending on each method declaration.
Every part of the method declaration is important.
Method's return value specifies one of Execute methods in the following way:
<table style="margin:7px">
<tr><th>Return Type</th><th>&nbsp;&nbsp;&nbsp;Execute Method&nbsp;&nbsp;&nbsp;</th></tr>
<tr><td>&nbsp;<i>IDataReader</i></td><td>&nbsp;ExecuteReader</td></tr>
<tr><td>&nbsp;Subclass of <i>DataSet</i></td><td>&nbsp;ExecuteDataSet</td></tr>
<tr><td>&nbsp;Subclass of <i>DataTable</i></td><td>&nbsp;ExecuteDataTable</td></tr>
<tr><td>&nbsp;<i>IList</i> interface</td><td>&nbsp;ExecuteList</td></tr>
<tr><td>&nbsp;<i>void</i></td><td>&nbsp;ExecuteNonQuery</td></tr>
<tr><td>&nbsp;<i>string</i>, <i>byte[]</i>, or value type&nbsp;</td><td>&nbsp;ExecuteScalar</td></tr>
<tr><td>&nbsp;in any other case</td><td>&nbsp;ExecuteObject</td></tr>
</table>
Method name explicitly defines action name which is converted to stored procedure name.<br/>
Type, order, and name of the method parameters is mapped to stored procedure parameters.
The only exception from this rule is a parameter of <a href="../Data/Intro.htm"><i>DbManager</i></a> type.
In this case generator uses provided <a href="../Data/Intro.htm"><i>DbManager</i></a> to call the stored procedure.
</p>
AbstractAccessor.cs
<% ..\..\HowTo\DataAccess\AbstractAccessor.cs %>
<a name='Person'></a>
Person.cs
<% ..\..\HowTo\DataAccess\Person.cs %>
Gender.cs
<% ..\..\HowTo\DataAccess\Gender.cs %>
App.config
<% Doc\Data\App.config %>
<a href="../Data/CreateSql.htm">Create SQL Script</a>
