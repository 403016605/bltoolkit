<?xml version="1.0" encoding="utf-8" ?>
<examples>

<maptype name="remarks">
<remarks>
If one of the abstract properties has to be implemented by different from return value type, 
the <b>MapTypeAttribute</b> attribute can be used. 
Suppose we have internal property implementation using the following class: 

<code>
public class MyString
{
    private string _value;
    public  string  Value
    {
        get { return _value;  }
        set { _value = value; }
    }
}
</code>
Typical property definition could be the following:
<code>
public class MyBizEntity
{
    private MyString _description;
    public  string    Description
    {
        get { return _description.Value;  }
        set { _description.Value = value; }
    }
}
</code>
Abstract property definition: 
<code>
public abstract class MyBizEntity
{
    [MapType(typeof(MyString))]
    public abstract string Description { get; set; }
}
</code>
In this case the mapper expects that <i>MyString</i> has <i>Value</i> property and the <i>Value</i> property 
type is coincident with the <i>Description</i> property return value type.
</remarks>
<include file="Examples.xml" path='examples/maptype[@name="ctor(Type)"]/*' />
</maptype>

</examples>
