<?xml version="1.0" encoding="utf-8"?>
<code transformer="GenConvert11.xslt">

	<using namespace="System"/>
	<using namespace="System.Data.SqlTypes"/>
	<using namespace="System.IO"/>

	<comment>Scalar Types.</comment>
	<converter type="String">
		<comment>Scalar Types.</comment>
		<from type="SByte"/>
		<from type="Int16"/>
		<from type="Int32"/>
		<from type="Int64"/>

		<from type="Byte"/>
		<from type="UInt16"/>
		<from type="UInt32"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>
		<from type="TimeSpan"/>
		<from type="Guid"/>

		<comment>Nullable Types.</comment>
		<from type="SByte?"/>
		<from type="Int16?"/>
		<from type="Int32?"/>
		<from type="Int64?"/>

		<from type="Byte?"/>
		<from type="UInt16?"/>
		<from type="UInt32?"/>
		<from type="UInt64?"/>

		<from type="Char?"/>
		<from type="Single?"/>
		<from type="Double?"/>

		<from type="Boolean?"/>
		<from type="Decimal?"/>
		<from type="DateTime?"/>
		<from type="TimeSpan?"/>
		<from type="Guid?"/>

		<comment>SqlTypes.</comment>
		<from type="SqlString"/>
		<from type="SqlByte"/>
		<from type="SqlInt16"/>
		<from type="SqlInt32"/>
		<from type="SqlInt64"/>

		<from type="SqlSingle"/>
		<from type="SqlDouble"/>
		<from type="SqlDecimal"/>
		<from type="SqlMoney"/>

		<from type="SqlBoolean"/>
		<from type="SqlDateTime"/>
		<from type="SqlGuid"/>
		<from type="SqlBinary"/>

		<default>return p.ToString();</default>
	</converter>

	<converter type="SByte"   nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>
		
		<from type="Int16"/>
		<from type="Int32"/>
		<from type="Int64"/>

		<from type="Byte"/>
		<from type="UInt16"/>
		<from type="UInt32"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>
		
		<comment>Nullable Types.</comment>
		<from type="SByte?"   >return p.HasValue?                 p.Value  : (SByte)0;</from>
		
		<from type="Int16?"   >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="Int32?"   >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="Int64?"   >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>

		<from type="Byte?"    >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="UInt16?"  >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="UInt32?"  >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="UInt64?"  >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToSByte(p.Value) : (SByte)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (SByte)0: Convert.ToSByte(p.Value);</from>

		<default>return Convert.ToSByte(p);</default>
	</converter>
	<converter type="Int16"   nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>
		
		<from type="SByte"/>
		<from type="Int32"/>
		<from type="Int64"/>

		<from type="Byte"/>
		<from type="UInt16"/>
		<from type="UInt32"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>

		<comment>Nullable Types.</comment>
		<from type="Int16?"   >return p.HasValue?                 p.Value  : (Int16)0;</from>
		
		<from type="SByte?"   >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="Int32?"   >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="Int64?"   >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>

		<from type="Byte?"    >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="UInt16?"  >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="UInt32?"  >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="UInt64?"  >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToInt16(p.Value) : (Int16)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (Int16)0: Convert.ToInt16(p.Value);</from>

		<default>return Convert.ToInt16(p);</default>
	</converter>
	<converter type="Int32"   nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>
		
		<from type="SByte"/>
		<from type="Int16"/>
		<from type="Int64"/>

		<from type="Byte"/>
		<from type="UInt16"/>
		<from type="UInt32"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>

		<comment>Nullable Types.</comment>
		<from type="Int32?"   >return p.HasValue?                 p.Value  : (Int32)0;</from>
		
		<from type="SByte?"   >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="Int16?"   >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="Int64?"   >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>

		<from type="Byte?"    >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="UInt16?"  >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="UInt32?"  >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="UInt64?"  >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToInt32(p.Value) : (Int32)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (Int32)0: Convert.ToInt32(p.Value);</from>

		<default>return Convert.ToInt32(p);</default>
	</converter>
	<converter type="Int64"   nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>
		
		<from type="SByte"/>
		<from type="Int16"/>
		<from type="Int32"/>

		<from type="Byte"/>
		<from type="UInt16"/>
		<from type="UInt32"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>

		<comment>Nullable Types.</comment>
		<from type="Int64?"   >return p.HasValue?                 p.Value  : (Int64)0;</from>
		
		<from type="SByte?"   >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="Int16?"   >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="Int32?"   >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>

		<from type="Byte?"    >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="UInt16?"  >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="UInt32?"  >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="UInt64?"  >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToInt64(p.Value) : (Int64)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (Int64)0: Convert.ToInt64(p.Value);</from>

		<default>return Convert.ToInt64(p);</default>
	</converter>

	<converter type="Byte"    nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>
		
		<from type="SByte"/>
		<from type="Int16"/>
		<from type="Int32"/>
		<from type="Int64"/>

		<from type="UInt16"/>
		<from type="UInt32"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>

		<comment>Nullable Types.</comment>
		<from type="Byte?"   >return p.HasValue?                 p.Value  : (Byte)0;</from>
		
		<from type="SByte?"   >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="Int16?"   >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="Int32?"   >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="Int64?"   >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>

		<from type="UInt16?"  >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="UInt32?"  >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="UInt64?"  >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToByte(p.Value) : (Byte)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (Byte)0: Convert.ToByte(p.Value);</from>

		<default>return Convert.ToByte(p);</default>
	</converter>
	<converter type="UInt16"  nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>

		<from type="Byte"/>
		<from type="Int16"/>
		<from type="Int32"/>
		<from type="Int64"/>

		<from type="SByte"/>
		<from type="UInt32"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>

		<comment>Nullable Types.</comment>
		<from type="UInt16?"   >return p.HasValue?                 p.Value  : (UInt16)0;</from>

		<from type="SByte?"   >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="Int16?"   >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="Int32?"   >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="Int64?"   >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>

		<from type="Byte?"    >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="UInt32?"  >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="UInt64?"  >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToUInt16(p.Value) : (UInt16)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (UInt16)0: Convert.ToUInt16(p.Value);</from>

		<default>return Convert.ToUInt16(p);</default>
	</converter>
	<converter type="UInt32"  nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>

		<from type="SByte"/>
		<from type="Int16"/>
		<from type="Int32"/>
		<from type="Int64"/>

		<from type="Byte"/>
		<from type="UInt16"/>
		<from type="UInt64"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>

		<comment>Nullable Types.</comment>
		<from type="UInt32?"   >return p.HasValue?                 p.Value  : (UInt32)0;</from>

		<from type="SByte?"   >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="Int16?"   >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="Int32?"   >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="Int64?"   >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>

		<from type="Byte?"    >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="UInt16?"  >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="UInt64?"  >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToUInt32(p.Value) : (UInt32)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (UInt32)0: Convert.ToUInt32(p.Value);</from>

		<default>return Convert.ToUInt32(p);</default>
	</converter>
	<converter type="UInt64"  nullable="false">
		<comment>Scalar Types.</comment>
		<from type="String"/>

		<from type="SByte"/>
		<from type="Int16"/>
		<from type="Int32"/>
		<from type="Int64"/>

		<from type="Byte"/>
		<from type="UInt16"/>
		<from type="UInt32"/>

		<from type="Char"/>
		<from type="Single"/>
		<from type="Double"/>

		<from type="Boolean"/>
		<from type="Decimal"/>
		<from type="DateTime"/>

		<comment>Nullable Types.</comment>
		<from type="UInt64?"   >return p.HasValue?                 p.Value  : (UInt64)0;</from>

		<from type="SByte?"   >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="Int16?"   >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="Int32?"   >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="Int64?"   >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>

		<from type="Byte?"    >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="UInt16?"  >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="UInt32?"  >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>

		<from type="Char?"    >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="Single?"  >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="Double?"  >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>

		<from type="Boolean?" >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="Decimal?" >return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>
		<from type="DateTime?">return p.HasValue? Convert.ToUInt64(p.Value) : (UInt64)0;</from>

		<comment>SqlTypes.</comment>
		<from type="SqlString"  >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>

		<from type="SqlByte"    >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>
		<from type="SqlInt16"   >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>
		<from type="SqlInt32"   >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>
		<from type="SqlInt64"   >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>

		<from type="SqlSingle"  >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>
		<from type="SqlDouble"  >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>
		<from type="SqlDecimal" >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>
		<from type="SqlMoney"   >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>

		<from type="SqlBoolean" >return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>
		<from type="SqlDateTime">return p.IsNull? (UInt64)0: Convert.ToUInt64(p.Value);</from>

		<default>return Convert.ToUInt64(p);</default>
	</converter>










	<comment nullable="true">A comment for nullable SByte.</comment>
	<converter type="SByte" nullable="true">
		<from type="String">return p == null? null: (SByte?)Convert.ToSByte(p);</from>
		<default>return Convert.ToSByte(p);</default>
	</converter>


	<region name="TestRegion">
		<converter type="Guid">
			<from type="String"   >return new Guid(p);                              </from>
			<from type="Guid?"    >return p.HasValue? p.Value : Guid.Empty;         </from>
			<from type="SqlString">return p.IsNull? Guid.Empty: new Guid(p.Value);  </from>
			<from type="SqlGuid"  >return p.IsNull? Guid.Empty: p.Value;            </from>
			<from type="SqlBinary">return p.IsNull? Guid.Empty: p.ToSqlGuid().Value;</from>
			<default nullvalue="Guid.Empty"/>
		</converter>
	</region>
</code>
