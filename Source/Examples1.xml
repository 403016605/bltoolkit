<?xml version="1.0" encoding="utf-8" ?> 
<examples>

<db name="AddDataProvider(DataProvider.IDataProvider)">
<example>
The following example uses the <b>AddDataProvider</b> method to add 
the Borland Data Providers for .NET (BDP.NET).
<code>
using System;
using System.Data;
using System.Data.Common;

using Borland.Data.Provider;

using Rsdn.Framework.Data;
using Rsdn.Framework.Data.DataProvider;

namespace Example
{
    public class BdpDataProvider: IDataProvider
    {
        IDbConnection IDataProvider.CreateConnectionObject()
        {
            return new BdpConnection();
        }
        
        DbDataAdapter IDataProvider.CreateDataAdapterObject()
        {
            return new BdpDataAdapter();
        }
        
        void IDataProvider.DeriveParameters(IDbCommand command)
        {
            BdpCommandBuilder.DeriveParameters((BdpCommand)command);
        }
        
        Type IDataProvider.ConnectionType
        {
            get
            {
                return typeof(BdpConnection);
            }
        }
        
        string IDataProvider.Name
        {
            get
            {
                return "Bdp";
            }
        }
    }
    
    class Test
    {
        static void Main()
        {
            DbManager.AddDataProvider(new BdpDataProvider());
            DbManager.AddConnectionString(".bdp",
                "assembly=Borland.Data.Mssql,Version=1.1.0.0,Culture=neutral,PublicKeyToken=91d62ebb5b0d1b1b;" +
                "vendorclient=sqloledb.dll;osauthentication=True;" +
                "database=Northwind;hostname=localhost;provider=MSSQL");
                
            using (DbManager db = new DbManager())
            {
                int count = (int)db.ExecuteScalar("SELECT Count(*) FROM Categories");
                
                Console.WriteLine(count);
            }
        }
    }
}
</code>
</example>
</db>

<db name="AssignParameterValues(DataRow)">
<example>
The following example demonstrates how to assign the <see cref="DataRow"/> to command parameters.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            DataTable table = new DataTable();
            
            table.Columns.Add("CategoryID",   typeof(int));
            table.Columns.Add("CategoryName", typeof(string));
            table.Columns.Add("Description",  typeof(string));
            
            table.Rows.Add(new object[] { 0, "New category", null });
            
            using (DbManager db = new DbManager())
            {
                db.Prepare(@"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @CategoryName, @Description
                    )",
                    db.CreateParameters(table.Rows[0]));
                    
                foreach (DataRow row in table.Rows)
                {
                    db.<b>AssignParameterValues</b>(row);
                    db.ExecutePreparedNonQuery();
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="AssignParameterValues(object)">
<example>
The following example demonstrates how to assign a business object to command parameters.
<code>
using System;
using System.Collections;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        public class Category
        {
            public int    ID;
            public string Name;
            public string Description;
        }
        
        static void Main()
        {
            ArrayList list = new ArrayList();
            
            Category  category = new Category();
            
            category.Name = "New category";
            
            list.Add(category);
            
            using (DbManager db = new DbManager())
            {
                db.Prepare(@"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @Name, @Description
                    )",
                    db.CreateParameters(list[0]));
                    
                foreach (object o in list)
                {
                    db.AssignParameterValues(o);
                    db.ExecutePreparedNonQuery();
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="Parameter(string)">
<example>
The following example demonstrates how to use the <b>Parameter</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                DataSet dataSet = db.ExecuteSpDataSet("SalesByCategory", "Seafood", null);
                
                int returnValue = (int)db.Parameter("@RETURN_VALUE").Value;
                
                Console.WriteLine("Return value is '{0}'", returnValue);
            }
        }
    }
}
</code>
</example>
</db>

<db name="Parameter(string,object)">
<example>
The following example demonstrates how to use the <b>Parameter</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                db.ExecuteNonQuery(@"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @Name, @Description
                    )",
                    db.Parameter("@Name",        "New category"),
                    db.Parameter("@Description", "Category description"));
            }
        }
    }
}
</code>
</example>
</db>

<db name="NullParameter(string,object)">
<example>
The following example demonstrates how to use the <b>Parameter</b> method.
<code>
using System;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                db.ExecuteNonQuery(@"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @Name, @Description
                    )",
                    db.Parameter    ("@Name",        "New category"),
                    db.NullParameter("@Description", null));
            }
        }
    }
}
</code>
</example>
</db>

<db name="Execute(string,IList)">
<example>
The following example demonstrates the use of the <b>Execute</b> method.
<code>
using System;
using System.Collections;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        public class Category
        {
            public int    ID;
            public string Name;
            public string Description;
        }
        
        static void Main()
        {
            ArrayList list = new ArrayList();
            
            Category  category = new Category();
            
            category.Name        = "New category";
            category.Description = "Category description";
            
            list.Add(category);
            
            using (DbManager db = new DbManager())
            {
                db.Execute(@"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @Name, @Description
                    )",
                    list);
            }
        }
    }
}
</code>
</example>
</db>

<db name="Execute(CommandType,string,IList)">
<example>
The following example demonstrates the use of the <b>Execute</b> method.
<code>
using System;
using System.Collections;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        public class Category
        {
            public int    ID;
            public string Name;
            public string Description;
        }
        
        static void Main()
        {
            ArrayList list = new ArrayList();
            
            Category  category = new Category();
            
            category.Name        = "New category";
            category.Description = "Category description";
            
            list.Add(category);
            
            using (DbManager db = new DbManager())
            {
                db.Execute(
                    CommandType.Text, @"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @Name, @Description
                    )",
                    list);
            }
        }
    }
}
</code>
</example>
</db>

<db name="Execute(string,DataTable)">
<example>
The following example demonstrates the use of the <b>Execute</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            DataTable table = new DataTable();
            
            table.Columns.Add("CategoryID",   typeof(int));
            table.Columns.Add("CategoryName", typeof(string));
            table.Columns.Add("Description",  typeof(string));
            
            table.Rows.Add(new object[] { 0, "New category", null });
            
            using (DbManager db = new DbManager())
            {
                db.Execute(@"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @CategoryName, @Description
                    )",
                    table);
            }
        }
    }
}
</code>
</example>
</db>

<db name="Execute(CommandType,string,DataTable)">
<example>
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            DataTable table = new DataTable();
            
            table.Columns.Add("CategoryID",   typeof(int));
            table.Columns.Add("CategoryName", typeof(string));
            table.Columns.Add("Description",  typeof(string));
            
            table.Rows.Add(new object[] { 0, "New category", null });
            
            using (DbManager db = new DbManager())
            {
                db.Execute(
                    CommandType.Text, @"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @CategoryName, @Description
                    )",
                    table);
            }
        }
    }
}
</code>
</example>
</db>

<db name="Execute(string,DataSet)">
<example>
The following example demonstrates the use of the <b>Execute</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            DataSet   dataSet = new DataSet();
            DataTable table   = dataSet.Tables.Add();
            
            table.Columns.Add("CategoryID",   typeof(int));
            table.Columns.Add("CategoryName", typeof(string));
            table.Columns.Add("Description",  typeof(string));
            
            table.Rows.Add(new object[] { 0, "New category", null });
            
            using (DbManager db = new DbManager())
            {
                db.Execute(@"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @CategoryName, @Description
                    )",
                    dataSet);
            }
        }
    }
}
</code>
</example>
</db>

<db name="Execute(CommandType,string,DataSet)">
<example>
The following example demonstrates the use of the <b>Execute</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            DataSet   dataSet = new DataSet();
            DataTable table   = dataSet.Tables.Add();
            
            table.Columns.Add("CategoryID",   typeof(int));
            table.Columns.Add("CategoryName", typeof(string));
            table.Columns.Add("Description",  typeof(string));
            
            table.Rows.Add(new object[] { 0, "New category", null });
            
            using (DbManager db = new DbManager())
            {
                db.Execute(
                    CommandType.Text, @"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @CategoryName, @Description
                    )",
                    dataSet);
            }
        }
    }
}
</code>
</example>
</db>

<db name="Execute(CommandType,string,DataSet,string)">
<example>
The following example demonstrates the use of the <b>Execute</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            DataSet   dataSet = new DataSet();
            DataTable table   = dataSet.Tables.Add("MyTable");
            
            table.Columns.Add("CategoryID",   typeof(int));
            table.Columns.Add("CategoryName", typeof(string));
            table.Columns.Add("Description",  typeof(string));
            
            table.Rows.Add(new object[] { 0, "New category", null });
            
            using (DbManager db = new DbManager())
            {
                db.Execute(
                    CommandType.Text, @"
                    INSERT INTO Categories (
                        CategoryName, Description
                    ) VALUES (
                        @CategoryName, @Description
                    )",
                    dataSet,
                    "MyTable");
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteNonQuery(string,IDbDataParameter[])">
<example>
The following example demonstrates how to use the <b>ExecuteNonQuery</b> method.
<code>
using System;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                db.ExecuteNonQuery(@"
                    DELETE FROM Categories 
                    WHERE CategoryID = @id",
                    db.Parameter("@id", 30));
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteScalar(string)">
<example>
The following example demonstrates how to use the <b>ExecuteScalar</b> method.
<code>
using System;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                int count = (int)db.ExecuteScalar("SELECT Count(*) FROM Categories");
                
                Console.WriteLine(count);
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteReader(commandText)">
<example>
The following example demonstrates how to use the <b>ExecuteReader</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager   db = new DbManager())
            using (IDataReader rd = db.ExecuteReader(@"
                SELECT CategoryName 
                FROM   Categories"))
            {
                while (rd.Read())
                {
                    Console.WriteLine(rd["CategoryName"]);
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteDataSet(string)">
<example>
The following example creates the <see cref="DataSet"/> by using the <b>ExecuteDataSet</b>
and prints it.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                DataSet dataSet = db.ExecuteDataSet("SELECT * FROM Categories");
                
                PrintDataSet(dataSet);
            }
        }
        
        static void PrintDataSet(DataSet dataSet)
        {
            foreach (DataTable table in dataSet.Tables)
            {
                Console.WriteLine("{0}:", table.TableName);
                
                foreach (DataRow row in table.Rows)
                {
                     Console.WriteLine();
                     
                     foreach (DataColumn col in table.Columns)
                     {
                         Console.WriteLine("{0,-12}: {1}",
                             col.ColumnName, row[col.ColumnName]);
                     }
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteSpDataSet(string,object[])">
<example>
The following example demonstrates how to use the <b>ExecuteSpDataSet</b> method.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                DataSet dataSet = db.ExecuteSpDataSet("SalesByCategory", "Seafood", null);
                
                PrintDataSet(dataSet);
            }
        }
        
        static void PrintDataSet(DataSet dataSet)
        {
            foreach (DataTable table in dataSet.Tables)
            {
                Console.WriteLine("{0}:", table.TableName);
                
                foreach (DataRow row in table.Rows)
                {
                     Console.WriteLine();
                     
                     foreach (DataColumn col in table.Columns)
                     {
                         Console.WriteLine("{0,-15}: {1}",
                             col.ColumnName, row[col.ColumnName]);
                     }
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteDataTable(string)">
<example>
The following example creates the <see cref="DataTable"/> by using the <b>ExecuteDataTable</b>
and prints it.
<code>
using System;
using System.Data;

using Rsdn.Framework.Data;

namespace Example
{
    class Test
    {
        static void Main()
        {
            using (DbManager db = new DbManager())
            {
                DataTable table = db.ExecuteDataTable("SELECT * FROM Categories");
                
                PrintDataSet(table);
            }
        }
        
        static void PrintDataSet(DataTable table)
        {
            foreach (DataRow row in table.Rows)
            {
                Console.WriteLine();
                
                foreach (DataColumn col in table.Columns)
                {
                    Console.WriteLine("{0,-12}: {1}",
                    col.ColumnName, row[col.ColumnName]);
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteBizEntity(object,string)">
<example>
The following example creates the Category and populates it 
by using the <b>ExecuteBizEntity</b>.
<code>
using System;

using Rsdn.Framework.Data;

namespace Example
{
    public class Category
    {
        [MapField(Name="CategoryID")]
        public int ID;
        
        [MapField(Name="CategoryName")]
        public string Name;
        
        [MapField(IsNullable=true)]
        public string Description;
    }
    
    class Test
    {
        static void Main()
        {
            using (DbManager   db = new DbManager())
            {
                Category category = new Category();
                
                db.ExecuteBizEntity(
                    category, @"
                    SELECT TOP 1
                        CategoryID,
                        CategoryName,
                        Description
                    FROM Categories");
                    
                Console.WriteLine("ID  : {0}\nName: {1}\nDesc: {2}",
                    category.ID, category.Name, category.Description);
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteBizEntity(Type,string)">
<example>
The following example creates the Category and populates it 
by using the <b>ExecuteBizEntity</b>.
<code>
using System;

using Rsdn.Framework.Data;

namespace Example
{
    public class Category
    {
        [MapField(Name="CategoryID")]
        public int ID;
        
        [MapField(Name="CategoryName")]
        public string Name;
        
        [MapField(IsNullable=true)]
        public string Description;
    }
    
    class Test
    {
        static void Main()
        {
            using (DbManager   db = new DbManager())
            {
                Category category = db.ExecuteBizEntity(
                    typeof(Category), @"
                    SELECT TOP 1
                        CategoryID,
                        CategoryName,
                        Description
                    FROM Categories");
                    
                if (category != null)
                {
                    Console.WriteLine("ID  : {0}\nName: {1}\nDesc: {2}",
                        category.ID, category.Name, category.Description);
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteList(Type,string)">
<example>
The following example demonstrates how to use the <b>ExecuteList</b> method.
<code>
using System;
using System.Collections;

using Rsdn.Framework.Data;

namespace Example
{
    public class Category
    {
        public int    ID;
        public string Name;
        public string Description;
    }
    
    class Test
    {
        static void Main()
        {
            using (DbManager   db = new DbManager())
            {
                ArrayList list = db.ExecuteList(
                    typeof(Category), @"
                    SELECT
                        CategoryID   as ID,
                        CategoryName as Name,
                        Description  as Description
                    FROM Categories");
                    
                foreach (Category category in list)
                {
                    Console.WriteLine("ID  : {0}\nName: {1}\nDesc: {2}",
                        category.ID, category.Name, category.Description);
                    Console.WriteLine();
                }
            }
        }
    }
}
</code>
</example>
</db>

<db name="ExecuteDictionary(string,Type,string)">
<example>
The following example demonstrates how to use the <b>ExecuteList</b> method.
<code>
using System;
using System.Collections;

using Rsdn.Framework.Data;

namespace Example
{
    public class Category
    {
        public int    ID;
        public string Name;
        public string Description;
    }
    
    class Test
    {
        static void Main()
        {
            using (DbManager   db = new DbManager())
            {
                Hashtable ht = db.ExecuteDictionary(
                    "ID",
                    typeof(Category), @"
                    SELECT
                        CategoryID   as ID,
                        CategoryName as Name,
                        Description  as Description
                    FROM Categories");
                    
                foreach (Category category in ht.Values)
                {
                    Console.WriteLine("ID  : {0}\nName: {1}\nDesc: {2}",
                        category.ID, category.Name, category.Description);
                    Console.WriteLine();
                }
            }
        }
    }
}
</code>
</example>
</db>

</examples>