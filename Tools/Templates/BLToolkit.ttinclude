<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#
	AppDomain.CurrentDomain.AssemblyResolve += (_,args) =>
	{
		if (DataProviderAssembly != null)
			return System.Reflection.Assembly.LoadFile(DataProviderAssembly);
		else
			return null;
	};
#><#+

string ConnectionString;
string ConnectionType;
string DataProviderAssembly = null;

string DataContextName;
string Namespace            = "DataModel";
string BaseDataContextClass = "DbManager";
string BaseEntityClass      = null;

bool   RenderField = false;

bool   IsMetadataLoaded;

int MaxColumnTypeLen;
int MaxColumnMemberLen;

static Action<GeneratedTextTransformation,Column,int[],string[]> RenderColumn = (tt,c,maxLens,attrs) =>
{
	if (maxLens.Sum() > 0)
	{
		if (attrs.Any(_ => _ != null))
		{
			tt.Write("[");

			for (var i = 0; i < attrs.Length; i++)
			{
				if (attrs[i] != null)
				{
					tt.Write(attrs[i]);
					tt.WriteSpace(maxLens[i] - attrs[i].Length);

					if (attrs.Skip(i + 1).Any(_ => _ != null))
						tt.Write(", ");
					else if (maxLens.Skip(i + 1).Any(_ => _ > 0))
						tt.WriteSpace(2);
				}
				else if (maxLens[i] > 0)
				{
					tt.WriteSpace(maxLens[i]);
					
					if (maxLens.Skip(i + 1).Any(_ => _ > 0))
						tt.WriteSpace(2);
				}
			}

			tt.Write("] ");
		}
		else
		{
			tt.WriteSpace(maxLens.Sum() + (maxLens.Where(_ => _ > 0).Count() - 1) * 2 + 3);
		}
	}

	tt.Write("public {0}{1} {2}", c.Type, tt.LenDiff(tt.MaxColumnTypeLen, c.Type), c.MemberName);

	if (!tt.RenderField)
		tt.WriteLine("{0} {{ get; set; }}", tt.LenDiff(tt.MaxColumnMemberLen, c.MemberName));
	else
		tt.WriteLine(";");
};

static Action<GeneratedTextTransformation,Table> RenderTable = (tt,t) =>
{
	RenderTableAttributes(tt, t);

	tt.Write("public partial class {0}", t.ClassName);

	if (!string.IsNullOrEmpty(t.BaseClassName))
		tt.Write(" : {0}", t.BaseClassName);

	tt.WriteLine("");

	tt.WriteLine("{");
	tt.PushIndent("\t");

	tt.MaxColumnTypeLen        = t.Columns.Values.Max(_ => _.Type.Length);
	tt.MaxColumnMemberLen      = t.Columns.Values.Max(_ => _.MemberName.Length);

	var maxLens = new int[]
	{
		t.Columns.Values.Max(_ => _.MemberName == _.ColumnName ? 0 : "MapField('')".Length + _.ColumnName.Length),
		t.Columns.Values.Max(_ => _.IsNullable                 ? "Nullable".Length : _.IsIdentity ? "Identity".Length : 0),
		t.Columns.Values.Max(_ => _.IsIdentity && _.IsNullable ? "Identity".Length : 0),
		t.Columns.Values.Max(_ => _.PKIndex >= 0               ? string.Format("PrimaryKey({0})", _.PKIndex).Length : 0),
		t.Columns.Values.Max(_ => string.IsNullOrEmpty(_.Attributes) ? 0 : _.Attributes.Length),
	};

	foreach (var c in from c in t.Columns.Values orderby c.ID select c)
	{
		var attrs = new string[]
		{
			c.MemberName == c.ColumnName       ? null : string.Format("MapField(\"{0}\")", c.ColumnName),
			c.IsNullable                       ? "Nullable" : c.IsIdentity ? "Identity" : null,
			c.IsIdentity && c.IsNullable       ? "Identity" : null,
			c.PKIndex    <  0                  ? null : string.Format("PrimaryKey({0})", c.PKIndex),
			string.IsNullOrEmpty(c.Attributes) ? null : c.Attributes,
		};

		RenderColumn(tt, c, maxLens, attrs);
	}

	tt.PopIndent();
	tt.WriteLine("}");
};

static Action<GeneratedTextTransformation,Table> RenderTableAttributes = (tt,t) =>
{
	if (!string.IsNullOrEmpty(t.Attributes))
		tt.WriteLine("[{0}]", t.Attributes);

	tt.Write("[TableName(");
	
	if (!string.IsNullOrEmpty(t.Owner))
		tt.Write("Owner=\"{0}\", ", t.Owner);

	tt.WriteLine("Name=\"{0}\")]", t.TableName);
};

List<string> Usings = new List<string>()
{
	"System",
	"BLToolkit.Data",
	"BLToolkit.Data.Linq",
	"BLToolkit.DataAccess",
	"BLToolkit.Mapping",
};

static Action<GeneratedTextTransformation> RenderUsing = tt =>
{
	var q =
		from ns in tt.Usings
		group ns by ns.Split('.')[0];

	var groups =
		(from ns in q where ns.Key == "System"                select ns).Concat
		(from ns in q where ns.Key != "System" orderby ns.Key select ns);

	foreach (var gr in groups)
	{
		foreach (var ns in from s in gr orderby s select s)
			tt.WriteLine("using {0};", ns);

		tt.WriteLine("");
	}
};

void GenerateModel()
{
	if (ConnectionString != null) ConnectionString = ConnectionString.Trim();
	if (DataContextName  != null) DataContextName  = DataContextName. Trim();

	if (string.IsNullOrEmpty(ConnectionString)) { Error("ConnectionString cannot be empty."); return; }
	if (string.IsNullOrEmpty(DataContextName))  { Error("DataContextName cannot be empty.");  return; }

	LoadMetadata();
#>
//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by BLToolkit template for T4.
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
<#+ RenderUsing(this); #>
namespace <#= Namespace #>
{
	public partial class <#= DataContextName #> : <#= BaseDataContextClass #>
	{
<#+
	var tlist  = (from t in Tables.Values orderby t.TableName select t).ToList();
	var maxlen = tlist.Max(_ => _.ClassName.Length);

	foreach (var t in tlist)
	{
#>
		public Table<<#= t.ClassName #>> <#=
			LenDiff(maxlen, t.ClassName) + t.ClassName + LenDiff(maxlen, t.ClassName) #> { get { return GetTable<<#= 
			t.ClassName #>>(); <#= 
			LenDiff(maxlen, t.ClassName) #>} }
<#+
	}
#>
	}
<#+
	foreach (var t in tlist)
	{
		WriteLine("");
		PushIndent("\t");
		RenderTable(this, t);
		PopIndent();
	}
#>
}
<#+
}

string LenDiff(int max, string str)
{
	var s = "";

	while (max-- > str.Length)
		s += " ";

	return s;
}

void WriteSpace(int len)
{
	while (len-- > 0)
		Write(" ");
}

List<T> CreateList<T>(T item)
{
	return new List<T>();
}

System.Data.IDbConnection GetConnection()
{
	var connType = Type.GetType(ConnectionType);
	var conn     = (System.Data.IDbConnection)Activator.CreateInstance(connType);

	conn.ConnectionString = ConnectionString;
	conn.Open();

	return conn;
}

Dictionary<string,Table> Tables = new Dictionary<string,Table>();

class Table
{
	public string Owner;
	public string TableName;
	public string ClassName;
	public string BaseClassName;
	public bool   isView;
	public string Attributes = null;

	public Dictionary<string,Column> Columns = new Dictionary<string,Column>();
}

class Column
{
	public int       ID;
	public string    ColumnName;
	public string    MemberName;
	public bool      IsNullable;
	public bool      IsIdentity;
	public string    Type;
	public bool      IsClass;
	public DbType    DbType;
	public SqlDbType SqlDbType;
	public string    Attributes = null;
	public int       PKIndex = -1;
}
#>
